\#include<boost/tuple/tuple.hpp>
\#include<boost/thread/thread.hpp>
\#include<boost/thread/barrier.hpp>
\#include<boost/atomic.hpp>
\#include<vector>
\#include<complex>
\#include<string.h>


volatile int counter[$threadCount] = {0, };


void wait_for_data_to_process(int tile)
{
	while(counter[tile] <= 0) boost::thread::yield();
}

void prepare_data_for_processing()
{
#foreach($l in $tiles)
	counter[${l.tile}] = 1;
#end
}

void data_processed(int tile) {
	counter[tile]--;
}

void wait_data_processed() {
#foreach($l in $tiles)
	while(counter[${l.tile}] > 0) boost::thread::yield();
#end
}

#foreach($l in $tiles)
std::complex<float> tmpvessel_${l.tile}[$block.getCount()] = {0, };
#end
std::complex<float> vessel[$block.getCount()] = {0, };

#foreach($l in $tiles)
void mycgemv_${l.tile}() {
for(;;) {
	//memset(tmpvessel_${l.tile}, 0, sizeof(tmpvessel_${l.tile}));
	wait_for_data_to_process(${l.tile});
#foreach($tm in $l.getMatrix())
#foreach($lm in $tm.target())
	tmpvessel_${l.tile}[$lm] = $tm.algebra.sum.identity;
#end
#end
#foreach($m in $l.getMatrix())
#foreach($t in $m.getMatrix())
#if ($t.v == $m.algebra.dot.identity)
	tmpvessel_${l.tile}[$t.j] $CppOperation.get($m.algebra.sum)= $CppOperation.get($l, $t.i) (vessel[$t.i]);
#else
	tmpvessel_${l.tile}[$t.j] $CppOperation.get($m.algebra.sum)= $CppOperation.get($l, $t.i) (vessel[$t.i]) $CppOperation.get($m.algebra.dot) (float)($t.v);
#end
#end

#end
	data_processed(${l.tile});
}
}
#end

void radlink_init() {
#foreach($l in $tiles)
	boost::thread thread_${l.tile}(mycgemv_${l.tile});
#end
}

float step(std::complex<float> in) {
	vessel[$block.getInput(0)] = in;
	
	prepare_data_for_processing();
	wait_data_processed();

	memset(vessel, 0, sizeof(vessel));
#foreach($i in [0..${block.getCount()}])
#if($i < $block.getCount())
#foreach($l in $tiles)
	vessel[$i] += tmpvessel_${l.tile}[$i];
#end
#end
#end

	return real(vessel[$block.getOutput(0)]);
}